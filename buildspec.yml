version: 0.2

env:
  variables:
    JAVA_HOME: "/usr/lib/jvm/java-8-openjdk-amd64"
    AWS_DEFAULT_REGION: "us-east-1"
    IMAGE_REPO_NAME: "joke_service"
    IMAGE_TAG: "latest"
  parameter-store:
    AWS_ACCOUNT_ID: "/CB/AWS/AID"
    AWS_ACCESS_KEY_ID: "/CB/AWS/AKI"
    AWS_SECRET_ACCESS_KEY: "/CB/AWS/AKS"


phases:
  install:
    commands:
      - echo Entered the install phase...
      - apt-get update -y
      - apt-get install -y gradle
    finally:
      - echo This always runs even if the update or install command fails 
  pre_build:
    commands:
      - echo Entered the pre_build phase...
      - echo Logging into Amazon ECR..
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    finally:
      - echo This always runs even if the login command fails 
  build:
    commands:
      - echo Entered the build phase...
      - echo Build started on `date`
      - ./gradlew build
    finally:
      - echo This always runs even if the install command fails
  post_build:
    commands:
      - echo Entered the post_build phase on `date`
      - echo Entered the post_build phase...
      - echo Building the docker image..
      - docker build -f Dockerfile -t $IMAGE_REPO_NAME .
      - echo Pushing the docker image to the ECR..
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
artifacts:
  files:
    #- target/messageUtil-1.0.jar
  discard-paths: yes
  secondary-artifacts:
    artifact1:
      files:
        #- target/messageUtil-1.0.jar
      discard-paths: yes
    artifact2:
      files:
        #- target/messageUtil-1.0.jar
      discard-paths: yes
cache:
  paths:
    #- '/root/.m2/**/*'
